{"version":3,"sources":["store.js","apiUtils.js","actions.js","Components/InputComponent.jsx","Components/Item.jsx","Components/ItemsList.jsx","Components/TodoApp.jsx","App.js","index.js"],"names":["store","createStore","state","action","type","serverState","map","el","id","isCompleted","filter","title","description","applyMiddleware","next","dispatch","getState","BASE_ENDPOINT","todoServerAPI","getData","a","fetch","data","json","postTask","body","method","JSON","stringify","headers","credentials","response","deleteTask","putTask","header","updateState","changeTask","InputComponent","React","useState","setTitle","isValidateError","SetIsValidateError","helperText","SetErrorHelperText","submitTask","ok","postNewTask","Grid","item","xs","TextField","onChange","e","target","value","label","placeholder","fullWidth","margin","autoFocus","onKeyPress","event","key","error","InputLabelProps","shrink","variant","useStyles","makeStyles","root","width","buttonPadding","padding","Item","classes","taskDescription","setTaskDescription","className","Accordion","AccordionSummary","aria-label","aria-controls","expandIcon","container","justify","FormControlLabel","onClick","stopPropagation","onFocus","control","Checkbox","checked","IconButton","fontSize","AccordionDetails","alignItems","spacing","multiline","rows","defaultValue","ItemsList","props","console","log","TodoApp","Container","fixed","App","useSelector","useDispatch","isAppInitialized","setIsAppInitialized","useEffect","AppBar","position","Toolbar","Typography","LinearProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.049bc063.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\r\n\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SERVER_STATE': {\r\n      return action.serverState;\r\n    }\r\n    case 'SET_IS_COMPLETED': {\r\n      return [...state].map(el => el.id !== action.id ? el : { ...el, isCompleted: !el.isCompleted });\r\n    }\r\n    case 'DELETE_TASK': {\r\n      return state.filter(el => el.id !== action.id);\r\n    }\r\n    case 'ADD_TASK': {\r\n      return [\r\n        ...state, { id: action.id, isCompleted: false, title: action.title, description: null }\r\n      ];\r\n    }\r\n    case 'SET_DESCRIPTION': {\r\n      return [...state].map(el => el.id !== action.id ? el : { ...el, description: action.description });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst thunkMiddleware = store => next => action => {\r\n  typeof action === 'function'\r\n    ? action(store.dispatch, store.getState)\r\n    : next(action)\r\n}\r\n\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware))","const BASE_ENDPOINT = 'https://5fd7e59c9dd0db0017ee9d3c.mockapi.io/api/v1/tasks/'\r\n\r\n\r\nexport const todoServerAPI = {\r\n\r\n    getData: async () => {\r\n        const data = await fetch(BASE_ENDPOINT)\r\n        return data.json();\r\n    },\r\n\r\n    postTask: async (body) => {\r\n        let response = await fetch(BASE_ENDPOINT, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n        return response\r\n    },\r\n\r\n    deleteTask: async (id) => {\r\n        let response = await fetch(BASE_ENDPOINT + id, {\r\n            method: 'DELETE',\r\n        })\r\n        return response\r\n    },\r\n\r\n    putTask: async (id, body) => {\r\n        await fetch(BASE_ENDPOINT + id, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const postTask = async (header, isCompleted = false, description = '') => {\r\n    const body = { isCompleted: isCompleted, title: header, description: description }\r\n    return await todoServerAPI.postTask(body)\r\n}\r\n\r\nexport const putTask = async (id, header, isCompleted, description) => {\r\n    const body = { id: id, isCompleted: isCompleted, title: header, description: description }\r\n    return await todoServerAPI.putTask(id, body)\r\n}","import { todoServerAPI, postTask, putTask } from './apiUtils'\r\n\r\nexport const updateState = () => {\r\n    return async (dispatch) => {\r\n        let serverState = await todoServerAPI.getData()\r\n        dispatch({ type: 'SET_SERVER_STATE', serverState })\r\n    }\r\n}\r\n\r\nexport const postNewTask = (title) => {\r\n    return async (dispatch) => {\r\n        let response = await postTask(title)\r\n        if (response.ok) {\r\n            dispatch(updateState())\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return async (dispatch) => {\r\n        let response = await todoServerAPI.deleteTask(id)\r\n        if (response.ok) {\r\n            dispatch({ type: 'DELETE_TASK', id: id })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const changeTask = (id, title, isCompleted, description) => {\r\n    return async (dispatch) => {\r\n        await putTask(id, title, isCompleted, description)\r\n        dispatch(updateState())\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { postNewTask } from './../actions' \r\nimport { Grid, TextField } from '@material-ui/core/';\r\n\r\n\r\nexport const InputComponent = ({ dispatch }) => {\r\n    const [title, setTitle] = React.useState('')\r\n    const [isValidateError, SetIsValidateError] = React.useState(false)\r\n    const [helperText, SetErrorHelperText] = React.useState(null)\r\n\r\n    const submitTask = () => {\r\n        if (title === ''){\r\n            SetIsValidateError(true)\r\n            SetErrorHelperText('Поле не может быть пустым')\r\n        }else {\r\n            SetIsValidateError(false)\r\n            SetErrorHelperText(null)\r\n            dispatch(postNewTask(title))\r\n            setTitle('')\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <Grid item xs={12}>\r\n                <TextField onChange={(e)=>{setTitle(e.target.value)}}\r\n                    id=\"outlined-full-width\"\r\n                    value={title}\r\n                    label=\"Введите новую задачу и нажмите Enter\"\r\n                    placeholder=\"Название задачи\"\r\n                    helperText={helperText}\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    autoFocus\r\n                    onKeyPress={(event)=>{\r\n                        if(event.key === 'Enter'){\r\n                            submitTask()\r\n                        }\r\n                    }}\r\n                    error={isValidateError}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                />\r\n            </Grid>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { deleteTask, changeTask } from './../actions'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {\r\n  Grid, TextField, Accordion, AccordionSummary, AccordionDetails,\r\n  Checkbox, FormControlLabel, IconButton\r\n} from '@material-ui/core/';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  buttonPadding: {\r\n    padding: '0px'\r\n  }\r\n});\r\n\r\nexport const Item = ({ id, isCompleted, title, description, dispatch }) => {\r\n  const classes = useStyles();\r\n\r\n  const [taskDescription, setTaskDescription] = useState(description)\r\n\r\n\r\n\r\n  const setIsCompleted = () => {\r\n    //dispatch({ type: 'SET_IS_COMPLETED', id: id })\r\n    dispatch(changeTask(id, title, !isCompleted, taskDescription))\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <div className={classes.root}>\r\n        <Accordion>\r\n          <AccordionSummary aria-label=\"Expand\" aria-controls=\"additional-actions1-content\"\r\n            id=\"additional-actions1-header\" expandIcon={<ExpandMoreIcon />}>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item xs={11}>\r\n                <FormControlLabel label={title} aria-label=\"Acknowledge\"\r\n                  onClick={(event) => event.stopPropagation()}\r\n                  onFocus={(event) => event.stopPropagation()}\r\n                  control={<Checkbox checked={isCompleted}\r\n                    onChange={setIsCompleted} />}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <IconButton className={classes.buttonPadding}\r\n                  onClick={(event) => {\r\n                    event.stopPropagation()\r\n                    dispatch(deleteTask(id))\r\n                  }}\r\n                  aria-label=\"delete\">\r\n                  <DeleteIcon fontSize=\"large\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <Grid container alignItems=\"center\" spacing={1}>\r\n              <Grid item xs={10}>\r\n                <TextField\r\n                  id=\"outlined-multiline-static\"\r\n                  label=\"Подробное описание\"\r\n                  multiline\r\n                  rows={4}\r\n                  defaultValue={description}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setTaskDescription(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={1} item xs zeroMinWidth>\r\n                <IconButton className={classes.buttonPadding}\r\n                  onClick={() => { dispatch(changeTask(id, title, isCompleted, taskDescription)) }}\r\n                  aria-label=\"delete\">\r\n                  <SaveIcon fontSize=\"large\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n\r\n      </div>\r\n    </Grid>\r\n  );\r\n}","import React from 'react';\r\nimport { Item } from './Item'\r\n\r\nimport { Grid } from '@material-ui/core/';\r\n\r\n\r\n\r\nexport const ItemsList = (props) => {\r\n  console.log(props.state)\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        {props.state.map(el => <Item key={el.id}\r\n          id={el.id}\r\n          isCompleted={el.isCompleted}\r\n          title={el.title}\r\n          description={el.description}\r\n          dispatch={props.dispatch} />\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { InputComponent } from './InputComponent'\r\nimport { ItemsList } from './ItemsList'\r\nimport { Container } from '@material-ui/core'\r\n\r\n\r\nexport const TodoApp = ({ state, dispatch }) => {\r\n    return (\r\n        <Container fixed >\r\n            <InputComponent dispatch={dispatch} />\r\n            <ItemsList state={state} dispatch={dispatch} />\r\n        </Container>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { todoServerAPI } from './apiUtils'\n\nimport { TodoApp } from './Components/TodoApp'\nimport { LinearProgress, AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst App = () => {\n  const state = useSelector(state => state)\n  const dispatch = useDispatch()\n  const [isAppInitialized, setIsAppInitialized] = useState(false)\n\n  useEffect(() => {\n    (async () => {\n      let serverState = await todoServerAPI.getData()\n      dispatch({ type: 'SET_SERVER_STATE', serverState })\n      setIsAppInitialized(true)\n    })()\n  }, [])\n\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            React Todo App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {\n        isAppInitialized\n          ? <TodoApp dispatch={dispatch} state={state} />\n          : <LinearProgress />\n      }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}